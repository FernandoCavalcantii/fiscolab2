from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from django.conf import settings
import os

User = get_user_model()

class Command(BaseCommand):
    help = 'Cria ou atualiza usu√°rio administrador padr√£o'

    def add_arguments(self, parser):
        parser.add_argument(
            '--email',
            type=str,
            default='admin@sefaz.com',
            help='Email do usu√°rio administrador (padr√£o: admin@sefaz.com)'
        )
        parser.add_argument(
            '--password',
            type=str,
            default='admin12345',
            help='Senha do usu√°rio administrador (padr√£o: admin12345)'
        )
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a atualiza√ß√£o da senha mesmo se o usu√°rio j√° existir'
        )

    def handle(self, *args, **options):
        email = options['email']
        password = options['password']
        force = options['force']
        
        self.stdout.write(
            self.style.SUCCESS('üöÄ Iniciando seed do usu√°rio administrador...')
        )
        
        try:
            # Verificar se o usu√°rio j√° existe
            if User.objects.filter(email=email).exists():
                user = User.objects.get(email=email)
                
                if force:
                    # Atualizar senha se for√ßado
                    user.set_password(password)
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  Usu√°rio {email} j√° existe. Atualizando senha...')
                    )
                else:
                    self.stdout.write(
                        self.style.WARNING(f'‚ö†Ô∏è  Usu√°rio {email} j√° existe. Use --force para atualizar a senha.')
                    )
            else:
                # Criar novo usu√°rio
                user = User.objects.create_user(
                    email=email,
                    password=password,
                    first_name='Admin',
                    last_name='Sistema',
                    cpf='12345678901'
                )
                self.stdout.write(
                    self.style.SUCCESS(f'‚úÖ Usu√°rio {email} criado com sucesso!')
                )
            
            # Garantir permiss√µes de administrador
            user.is_staff = True
            user.is_superuser = True
            user.is_active = True
            user.save()
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ Permiss√µes de administrador configuradas!')
            )
            
            # Exibir informa√ß√µes do usu√°rio
            self.stdout.write('\n' + '='*50)
            self.stdout.write(
                self.style.SUCCESS('üéØ USU√ÅRIO ADMINISTRADOR CONFIGURADO')
            )
            self.stdout.write('='*50)
            self.stdout.write(f'üìß Email: {user.email}')
            self.stdout.write(f'üîë Senha: {password}')
            self.stdout.write(f'üë§ Nome: {user.full_name}')
            self.stdout.write(f'üîß Staff: {user.is_staff}')
            self.stdout.write(f'üîß Superuser: {user.is_superuser}')
            self.stdout.write(f'‚úÖ Ativo: {user.is_active}')
            self.stdout.write('='*50)
            
            # Verificar se est√° em ambiente de produ√ß√£o
            if not settings.DEBUG:
                self.stdout.write(
                    self.style.WARNING(
                        '‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° em ambiente de PRODU√á√ÉO!'
                    )
                )
                self.stdout.write(
                    self.style.WARNING(
                        'üîí Considere alterar a senha padr√£o ap√≥s o primeiro login.'
                    )
                )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro ao criar usu√°rio administrador: {str(e)}')
            )
            raise
